#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* src/App.css */

/* ... Keep any existing styles you want ... */

/* Styles for Backend/MQTT Status Indicators */
.status-indicator {
  text-align: center;
  font-size: 0.9em;
  margin: 5px auto; /* Center horizontally */
  padding: 4px 10px;
  border-radius: 4px;
  display: inline-block; /* Allow centering via text-align on parent */
  border: 1px solid transparent;
  min-width: 180px; /* Give some consistent width */
}

.status-indicator.connected {
  color: #155724; /* Dark Green */
  background-color: #d4edda; /* Light Green */
  border-color: #c3e6cb;
}

.status-indicator.disconnected,
.status-indicator.error {
  color: #721c24; /* Dark Red */
  background-color: #f8d7da; /* Light Red */
  border-color: #f5c6cb;
}
.status-indicator.connecting,
.status-indicator.unknown {
  color: #856404; /* Dark Yellow */
  background-color: #fff3cd; /* Light Yellow */
  border-color: #ffeeba;
}

.status-indicator .error-text {
    font-style: italic;
    margin-left: 5px;
    font-weight: bold;
}

/* Ensure the container allows centering of the indicators */
.app-container > p.status-indicator {
    display: block; /* Make them block elements */
    width: fit-content; /* Adjust width to content */
    margin-left: auto;
    margin-right: auto;
}

/* Styles for Mode Selector (if not already present) */
.mode-selector {
  margin-top: 20px;
  text-align: center;
  padding-bottom: 15px;
  border-bottom: 1px solid #eee;
}

/* Remove custom .mode-selector button styles */

/* Ensure GDS button group spacing works */
.mode-selector.govuk-button-group {
  cursor: default;
  opacity: 1; /* Ensure active button is fully opaque */
}

/* Styles for Mode Controls Container (if not already present) */
.mode-controls {
  margin-top: 15px;
  width: 90%;
  max-width: 600px; /* Or match settings panel width */
  /* Center the controls container */
  margin-left: auto;
  margin-right: auto;
  position: relative; /* Needed for Draggable bounds="parent" */
  min-height: 300px; /* Give some space for dragging, adjust as needed */
  /* Add some padding if needed */
  /* padding: 10px; */
}

/* Styles for Draggable Panel Wrapper (if not already present) */
.draggable-panel {
    /* Style the wrapper if needed, e.g., for positioning or borders */
    /* position: absolute; /* If you want absolute positioning */
    width: 100%; /* Take width of container */
    box-sizing: border-box;
}

/* Style the handle element (if not already present) */
.draggable-handle {
    cursor: move; /* Indicate draggable area */
    user-select: none; /* Prevent text selection while dragging */
}

/* Dark Mode Base (Apply .dark-mode class to body or app container) */
.dark-mode {
    background-color: #1a202c; /* Dark background */
    color: #e2e8f0; /* Light text */
}

.dark-mode .app-container {
    /* Adjust app container for dark mode if needed */
}

.dark-mode .mode-selector {
    border-bottom-color: #4a5568; /* Darker border */
}

/* Dark Mode for GDS Buttons (Keep these if dark mode toggle should affect them) */
.dark-mode .govuk-button {
    background-color: #4a5568; /* Darker button background */
    color: #e2e8f0; /* Light text */
    border-color: #718096;
    box-shadow: none; /* Remove default GDS shadow in dark mode if desired */
}
.dark-mode .govuk-button:hover:not(:disabled) {
    background-color: #718096;
    border-color: #a0aec0;
}
.dark-mode .govuk-button--secondary { /* Style secondary buttons in dark mode */
    background-color: transparent;
    color: #a0aec0;
    border-color: #718096;
}
.dark-mode .govuk-button--secondary:hover:not(:disabled) {
    background-color: rgba(160, 174, 192, 0.1); /* Subtle hover */
    border-color: #a0aec0;
    color: #cbd5e0;
}
.dark-mode .govuk-button:disabled { /* Style for the *active* (disabled) primary button */
  background-color: #3182ce; /* Darker blue for active */
  color: white;
  border-color: #3182ce;
  opacity: 1; /* Ensure it's fully opaque */
}
/* Ensure secondary buttons that are disabled (but not the active one) look disabled */
.dark-mode .govuk-button--secondary:disabled {
    background-color: transparent; /* Keep background transparent */
    border-color: #4a5568; /* Use a darker border */
    color: #718096; /* Use a muted text color */
    opacity: 0.5; /* Reduce opacity */
}
/* Override the above if the disabled secondary button IS the active one (shouldn't happen with current logic, but for safety) */
.dark-mode .govuk-button--secondary:disabled:not([class*='govuk-button--secondary']) {
    /* This selector targets a button that is BOTH secondary AND disabled, but NOT the primary active one. */
    /* Re-apply primary active styles if needed, though the primary style should take precedence */
     background-color: #3182ce;
     color: white;
     border-color: #3182ce;
     opacity: 1;
}


/* Dark mode status indicators */
.dark-mode .status-indicator.connected {
  color: #9ae6b4; /* Light Green */
  background-color: #2f855a; /* Dark Green */
  border-color: #38a169;
}

.dark-mode .status-indicator.disconnected,
.dark-mode .status-indicator.error {
  color: #feb2b2; /* Light Red */
  background-color: #c53030; /* Dark Red */
  border-color: #e53e3e;
}
.dark-mode .status-indicator.connecting,
.dark-mode .status-indicator.unknown {
  color: #faf089; /* Light Yellow */
  background-color: #b7791f; /* Dark Yellow */
  border-color: #d69e2e;
}
